<?xml version="1.0"?>
<project xmlns:ivy="antlib:org.apache.ivy.ant"
	basedir="." name="java-nio-ext" default="release"
>
	<property name="version.properties.file" location="version.properties" />
	<property name="user.properties.file" location="${user.name}.properties" />
	<property name="app.properties.file" location="build.properties" />

	<echo message="ant.version=${ant.version}" />
	<echo message="java.home=${java.home}" />
	<echo message="java.runtime.version=${java.runtime.version}" />

	<property file="${version.properties.file}" />
	<property file="${user.properties.file}" />

	<property name="jdk.dir" location="${java.home}/.." />
	<property file="${app.properties.file}" />

	<echo message="JDK path: ${jdk.dir}" />

	<mkdir dir="${lib.main.dir}" />
	<mkdir dir="${lib.ivy.main.dir}" />
	<path id="main.path">
		<fileset dir="${lib.main.dir}" includes="*.jar" />
		<fileset dir="${lib.ivy.main.dir}" includes="*.jar" />
	</path>

	<mkdir dir="${lib.test.dir}" />
	<mkdir dir="${lib.ivy.test.dir}" />
	<path id="test.path">
		<fileset dir="${lib.test.dir}" includes="*.jar" />
		<fileset dir="${lib.ivy.test.dir}" includes="*.jar" />
	</path>

	<target name="compile" depends="clean-bin.main">
		<mkdir dir="${bin.dir}/source" />
		<copy todir="${bin.dir}/source">
			<fileset dir="${src.main.dir}" includes="**" />
		</copy>
		<javac
			srcdir="${bin.dir}/source"
			destdir="${bin.main.dir}"
			includeantruntime="false"
		>
			<classpath>
				<path refid="main.path" />
			</classpath>
		</javac>
		<delete dir="${bin.dir}/source" />
		<copy todir="${bin.main.dir}">
			<fileset dir="${src.main.dir}" excludes="**/*.java" />
		</copy>
	</target>

	<target name="package" depends="compile">
		<delete file="${package.file}" />
		<jar destfile="${package.file}" basedir="${bin.main.dir}" />
	</target>

	<target name="release" depends="clean-rel,package">
		<move file="${package.file}" todir="${rel.dir}" />
		<copy todir="${rel.dir}">
			<fileset dir="${lib.ivy.main.dir}" />
			<fileset dir="${lib.main.dir}" />
		</copy>
	</target>

	<target name="test" depends="clean-out.test,compile-test,-define-testng-ant-tasks">
		<testng outputdir="${out.test.dir}">
			<xmlfileset file="${cfg.dir}/testng.xml" />
			<classpath>
				<path refid="main.path" />
				<path refid="test.path" />
				<pathelement location="${bin.main.dir}" />
				<pathelement location="${bin.test.dir}" />
			</classpath>
		</testng>
	</target>

	<target name="compile-test" depends="clean-bin.test,compile">
		<javac
			srcdir="${src.test.dir}"
			destdir="${bin.test.dir}"
			includeantruntime="false"
		>
			<classpath>
				<path refid="main.path" />
				<path refid="test.path" />
				<pathelement location="${bin.main.dir}" />
			</classpath>
		</javac>
	</target>

	<target name="resolve-main-dependencies" depends="-define-ivy-ant-tasks">
		<mkdir dir="${lib.ivy.main.dir}" />

		<!-- setting transitive to false will prevent the download of dependent libraries -->
		<ivy:resolve file="ivy-main.xml" transitive="true" />
		<ivy:retrieve pattern="${lib.ivy.main.dir}/[module]-[revision].[ext]" />
	</target>

	<target name="resolve-test-dependencies" depends="-define-ivy-ant-tasks">
		<mkdir dir="${lib.ivy.test.dir}" />

		<!-- setting transitive to false will prevent the download of dependent libraries -->
		<ivy:resolve file="ivy-test.xml" transitive="true" />
		<ivy:retrieve pattern="${lib.ivy.test.dir}/[module]-[revision].[ext]" />
	</target>

	<!-- Ivy shortcuts-->
	<target name="ivy-main" depends="resolve-main-dependencies" />
	<target name="ivy-test" depends="resolve-test-dependencies" />
	<target name="ivy" depends="ivy-main,ivy-test" />

	<target name="clobber">
		<delete file="${package.file}" />
		<delete dir="${lib.ivy.dir}" />
		<delete dir="${bin.dir}" />
		<delete dir="${out.dir}" />
		<delete dir="${rel.dir}" />
	</target>

	<target name="clean" depends="clean-bin,clean-out,clean-rel" />

	<target name="clean-ivy" depends="clean-lib.ivy.main,clean-lib.ivy.test" />
	<target name="clean-lib.ivy.main">
		<delete dir="${lib.ivy.main.dir}" />
		<mkdir dir="${lib.ivy.main.dir}" />
	</target>
	<target name="clean-lib.ivy.test">
		<delete dir="${lib.ivy.test.dir}" />
		<mkdir dir="${lib.ivy.test.dir}" />
	</target>

	<target name="clean-bin" depends="clean-bin.main,clean-bin.test" />
	<target name="clean-bin.main">
		<delete dir="${bin.main.dir}" />
		<mkdir dir="${bin.main.dir}" />
	</target>
	<target name="clean-bin.test">
		<delete dir="${bin.test.dir}" />
		<mkdir dir="${bin.test.dir}" />
	</target>

	<target name="clean-out" depends="clean-out.test" />
	<target name="clean-out.test">
		<delete dir="${out.test.dir}" />
		<mkdir dir="${out.test.dir}" />
	</target>

	<target name="clean-rel">
		<delete dir="${rel.dir}" />
		<mkdir dir="${rel.dir}" />
	</target>


	<!-- [start] Ivy -->
	<target name="-download-ivy">
		<echo message="Downloading Apache Ivy ${ivy.version}"/>
		<get
			src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.version}/ivy-${ivy.version}.jar"
			dest="${ivy.jar}"
			verbose="true"
			skipexisting="true"
		/>
	</target>

	<target name="-define-ivy-ant-tasks" depends="-download-ivy">
		<taskdef
			resource="org/apache/ivy/ant/antlib.xml"
			uri="antlib:org.apache.ivy.ant"
			classpath="${ivy.jar}"
		/>
	</target>
	<!-- [end] Ivy -->


	<!-- [start] TestNG -->
	<target name="-define-testng-ant-tasks">
		<taskdef resource="testngtasks" classpathref="test.path" />
	</target>
	<!-- [end] TestNG -->

	<!-- [start] exec
		Execute targets using another JVM.
		For example, to run the compile task:
			ant -Dtarget=compile exec
	-->
	<target name="exec" depends="-define-use-jvm">
		<fail message="Invalid JDK location: jdk.dir=${jdk.dir}">
			<condition>
				<not><available file="${jdk.dir}" type="dir" /></not>
			</condition>
		</fail>
		<use-jvm
			javahome="${jdk.dir}"
			target="${target}"
		/>
	</target>

	<target name="-define-use-jvm">
		<macrodef name="use-jvm">
			<attribute name="target" />
			<attribute name="javahome" />
			<attribute name="antfile" default="build.xml" />
			<attribute name="basedir" default="." />
			<attribute name="args" default="-Dsample.value=xxx" />
			<attribute name="taskname" default="ant" />

			<sequential>
				<java classname="org.apache.tools.ant.launch.Launcher"
					fork="true"
					jvm="@{javahome}/bin/java"
					failonerror="true"
					dir="@{basedir}"
					timeout="99999999"
					taskname="@{taskname}"
				>
					<classpath>
						<pathelement location="${ant.home}/lib/ant-launcher.jar" />
					</classpath>

					<arg value="-buildfile" />
					<arg file="@{antfile}" />
					<arg value="@{args}" />
					<arg value="@{target}" />
					<arg value="-Dbasedir=@{basedir}"/>
				</java>
			</sequential>
		</macrodef>
	</target>
	<!-- [end] exec -->
</project>
